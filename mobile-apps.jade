extends layout

block vars
  - var thisPage = 'mobile-apps'

block content
  .jumbotron(style='background: url("images/header-2-500.jpg"); background-size:cover;')
    .container(style='padding-top: 70px').feature-container
      h1 Mobile API Gateway

      p Securing Mobile APIs using the OAuth2 Resource Owner Password Flow

  .container.pad20
    .row
      .col-md-8
        h4 Use Case Description
        p.
          For mobile applications (on smartphones/tablets) a typical use case is that you let a user log in to your service,
          or create some kind of unique identifier for the user's device, which is considered the identity of the user,
          and that you then allow access only in the context of this user to your backend API.
        p.
          In order to prevent fraud or excessive usage of your API, it's also typical to apply rate limiting by number
          of calls per authorized user and application.
        p.
          You can now leverage the "local" authentication method of wicked to store your mobile users email addresses
          and passwords. Wicked can act as a full featured identity provider for your mobile backend, i.e. be a full
          mobile backend, including authentication and authorization.

        img(src="images/uc-mobile-api-gateway.png").center-block

  .grey
    .container.pad20
      .row
        .col-md-4
          p &nbsp;
        .col-md-8
          h4 Development Time Workflow

          p.
            For development time, the following workflow is typical:
          ol
            li The developer signs up for the API Portal and registers the mobile application in the portal, using a <a href="https://wicked-demo.haufe.io/help/trusted" target="_blank">trusted subscription</a>
            li By creating a subscription to the Mobile API, the developer obtains client credentials for the mobile application, a client ID and a client secret; for this use case, only the client ID is significant
            li The developer incorporates the client ID into the mobile application and implements the needed bits for the OAuth2.0 Resource Owner Password Grant Flow.
          
          p.
            For the OAuth2.0 Resource Owner Password Grant, it is not necessary and advised against to also incorporate the client
            secret into the mobile app; in case the API also supports the client credentials flow, this would enable attackers to
            reverse engineer the app and extract the credentials. The client ID on the other hand is only helpful in combination with
            an end user identity, which the end user will also try to protect.
          p.
            The wicked Authorization Server would also reject calls using the Resource Owner Password Grant from public applications
            presenting their client secret, and vice versa.
    
  .container.pad20
    .row
      .col-md-8
        h4 Runtime Workflow

        p.
          At runtime, the authentication and authorization of the API usage for the end user inside the mobile app will work as follows.
          When the end user opens the application for the first time, this happens:
        ol
          li The mobile app presents a login screen which asks for username and password of the end user
          li.
            Using the client ID, the username and password, the mobile app uses the OAuth 2.0 Resource Owner Password Grant Flow to 
            ask an Authorization Server for an access token to the backend API
          li.
            The Authorization Server verifies the username and password, and if successful, issues both an Access Token and a Refresh Token
            for the mobile App to use
          li.
            Whenever the mobile app now uses the access token, all requests to the backend API will be enriched with the identity
            (and possibly scope) of the request

        p.
          The mobile app can (and should) now discard the end user username and password, and instead make use of the access token;
          in case the access token expires, the mobile app cann use the refresh token to obtain a new access token (and refresh token).
        p.
          This means that the mobile app does not need to keep the user's actual secrets; it has exchanged them for a purpose-tied
          pair of access and refresh tokens; even if the mobile app is hacked, the user's username and password are no longer
          present in the memory/storage of the mobile app, which obviously increases security.

  .grey
    .container.pad20
      .row
        .col-md-4
          p &nbsp;
        .col-md-8
          h4 How do I implement this with wicked?

          p.
            Wicked packs brings all the necessary components to implement this out of the box:

          ul
            li.
              Wicked stores usernames and passwords, and if needed, can also ask new users for additional
              information (registration information).
            li.
              The wicked Authorization Server automatically creates suitable endpoints so that your API can
              only be accessed using access tokens which are created using this endpoint.
            li.
              When your backend API is called from the Gateway Proxy, and a valid access token is presented,
              Kong will automatically inject <b>who</b> is calling (as <code>X-Authenticated-UserId</code>),
              which application is calling the API on behalf of the user.
            li.
              You can leverage this injected information to do further checking on the user as your business
              logic requires, but wicked makes sure that only well-known users are being let through to your
              API.

          p.
            In case you implement using node.js, you can also leverage the wicked SDK to have even more
            influence on the user and registration management. Read up on the wicked SDK here:
          
          ul
            li.
              <a href="https://github.com/apim-haufe-io/wicked.node-sdk" target="_blank">GitHub Repository wicked.node-sdk</a>
            li.
              <a href="https://apim-haufe-io.github.io/wicked.node-sdk" target="_blank">Wicked SDK documentation</a>

          p.
            In a future version, wicked will also support the PKCE enhancement of the Authorization Code Grant
            (see <a href="https://tools.ietf.org/html/rfc7636" target="_blank">RFC 7636) and OAuth2 for native apps
            (see <a href="https://tools.ietf.org/html/rfc8252" target="_blank">RFC 8252</a>). This will enable even
            more flexible authentication scenarios for mobile/native applications.
