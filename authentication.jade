extends layout

block vars
  - var thisPage = 'authentication'

block content
  .jumbotron(style='background: url("images/header-4-500.jpg"); background-size:cover;')
    .container(style='padding-top: 70px').feature-container
      h1 Authentication

      p Authentication Options of the API Portal
  .container.pad20
    .row
      .col-md-6
        h3 Portal Authentication
      .col-md-6
        | &nbsp;
    .row
      .col-md-6
        p.
          To let your developers log in to your API Portal, you can choose from the
          following means of authentication:

        ul
          li E-mail and password signup and login
          li ADFS 3.0 Federation using your own ADFS instance (SAML)
          li Github Social Login (OAuth 2.0)
          li Google Login (OAuth 2.0)
          li ... more to come

        p.
          For e-mail and password log in, the portal supports reCAPTCHA to avoid robots
          signing up to your portal; additionally, you can configure the portal to validate
          email addresses.
        p.
          Sending lost password reset requests is also supported; you only have to supply
          the API Portal with SMTP credentials.
      .col-md-6
        img(src='images/auth-portal.png').center-block

    .row.pad20
      .col-md-12 &nbsp;
  
  .grey
    .container
      .row
        .col-md-6
          | &nbsp;
        .col-md-6
          h3 API Authentication
      .row
        .col-md-6(style='padding-bottom:20px')
          img(src='images/auth-kong.png').center-block
        .col-md-6
          p.
            Besides the portal authentication, your developers can register applications with the
            API Portal and subscribe to your APIs. You can choose to authenticate these applications
            using one of the following methods:
          
          ul
            li Static API Keys (using a header)
            li OAuth 2.0, including Client Credentials Flow, Authorization Code Flow, Implicit Flow and Resource Owner Password Grant

          p.
            Credentials, i.e. API Keys or Client ID and Client Secret are generated for each application
            and per API subscription automatically, depending on how you choose to secure your API.

          p.
            Need other means of authentication? Kong supports additional ones, such as JWT. File an issue
            on GitHub and tell us.

  .container
    .row
      .col-md-3
        p &nbsp;
      .col-md-6.pad20
        p.
          For more information, either see the documentation on <a href='https://github.com/Haufe-Lexware/wicked.haufe.io'>GitHub</a>
          or the use case descriptions on this microsite:
        ul
          li
            a(href='machine-to-machine.html') Machine to Machine Communication
          //li
          //  a(href='enduser-to-api.html') End User Authentication and Authorization
          li
            a(href='mobile-apps.html') Mobile API Gateway
          li
            a(href='single-page-apps.html') Single Page Application API Gateway
