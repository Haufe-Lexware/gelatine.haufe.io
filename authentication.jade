extends layout

block vars
  - var thisPage = 'authentication'

block content
  .jumbotron(style='background: url("images/header-4-500.jpg"); background-size:cover;')
    .container(style='padding-top: 70px').feature-container
      h1 Authentication

      p Authentication Options of the API Portal
  .container.pad20
    .row
      .col-md-6
        h3 Portal Authentication
      .col-md-6
        | &nbsp;
    .row
      .col-md-6
        p.
          To let your developers log in to your API Portal, you can choose from the
          following means of authentication:

        ul
          li E-mail and password signup and login
          li ADFS 3.0 Federation using your own ADFS instance (SAML)
          li Github Login
          li Google Login
          li Twitter Login
          li Generic OAuth2 lgogin (JWT based)
          li SAML based SSO
          li ... more to come

        p.
          For e-mail and password log in, the portal supports reCAPTCHA to avoid robots
          signing up to your portal; additionally, you can configure the portal to validate
          email addresses.
        p.
          Sending lost password reset requests is also supported; you only have to supply
          the API Portal with SMTP credentials.
      .col-md-6
        img(src='images/auth-portal.png').center-block

    .row.pad20
      .col-md-12 &nbsp;
  
  .grey
    .container
      .row
        .col-md-6
          | &nbsp;
        .col-md-6
          h3 API Authentication
      .row
        .col-md-6(style='padding-bottom:20px')
          img(src='images/auth-kong.png').center-block
        .col-md-6
          p.
            Any type of authentication which you have configured for the Portal can also be used
            for authenticating the use of any API registered in the API Portal. Wicked will federate
            any type of login to a standard OAuth 2.0 flow, e.g. to an Authorization Code Grant, or
            the Implicit Grant. This also applies to logins using SAML. Your applications only need
            to implement generic OAuth 2.0, all other login types are federated by Wicked.

          p. 
            For simple machine to machine communication, you can also use plain API Keys.          

          p.
            Credentials, i.e. API Keys or Client ID and Client Secret are generated for each application
            and per API subscription automatically, depending on how you choose to secure your API.

          p.
            Need other means of authentication? File an 
            <a href="https://github.com/Haufe-Lexware/wicked.haufe.io/issues" target="_blank">issue
            on GitHub</a> and tell us.
    .white
      .container
        .row
          .col-md-6
            h3 API Authorization
          .col-md-6
            | &nbsp;
        .row
          .col-md-6
            p.
              Wicked from version 1.0.0 on packs a feature rich Authorization Server with the installation.
              The Authorization Server can serve as a full featured OAuth 2.0 Identity Provider, or it can
              be used the federate identities from a wide range of Identity Providers, such as Google, Twitter,
              GitHub, ADFS, generic OAuth 2.0 or even SAML.
            p.
              The Authorization Server can federate these identites to using a standard OAuth 2.0 flow, even
              if the federated identity provider is e.g. a SAML identity provider.
            p.
              See also the documentation of the 
              <a href="https://wicked-demo.haufe.io" target="_blank">wicked-demo.haufe.io Demo Portal</a>
              regarding support for the different OAuth 2.0 flows:
              
            ul
              li.
                <a href="https://wicked-demo.haufe.io/help/oauth2_client_credentials" target="_blank">Client Credentials</a>
              li.
                <a href="https://wicked-demo.haufe.io/help/oauth2_authorization_code" target="_blank">Authorization Code Grant</a>
              li.
                <a href="https://wicked-demo.haufe.io/help/oauth2_implicit_grant" target="_blank">Implicit Grant</a>
              li.
                <a href="https://wicked-demo.haufe.io/help/oauth2_password_grant" target="_blank">Resource Owner Password Grant</a>

  .container
    .row
      .col-md-3
        p &nbsp;
      .col-md-6.pad20
        p.
          For more information, either see the documentation on <a href='https://github.com/Haufe-Lexware/wicked.haufe.io'>GitHub</a>
          or the use case descriptions on this microsite:
        ul
          li
            a(href='machine-to-machine.html') Machine to Machine Communication
          //li
          //  a(href='enduser-to-api.html') End User Authentication and Authorization
          li
            a(href='mobile-apps.html') Mobile API Gateway
          li
            a(href='single-page-apps.html') Single Page Application API Gateway
