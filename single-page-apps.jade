extends layout

block vars
  - var thisPage = 'single-page-apps'

block content
  .jumbotron(style='background: url("images/header-2-500.jpg"); background-size:cover;')
    .container(style='padding-top: 70px').feature-container
      h1 Single Page Applications

      p Securing Single Page Apps using the OAuth2 Implicit Grant Flow

  .container.pad20
    .row
      .col-md-8
        h4 Use Case Description
        p.
          Modern Single Page Applications are typically powered by a backend REST API, which needs to be
          secured against misuse. As the application lives entirely in the browser (user agent) of the
          end user, and does typically not have a server session, traditional approaches for this (server
          side sessions) are not desired.
        p.
          In order to decouple the backend API and frontend application, an API Gateway can be put in place
          to implement the OAuth 2.0 Implicit Grant Flow, which is the recommended way of solving giving
          a "public" client (as opposed to a &quot;confidential&quot; client)
          access to an API.

        img(src="images/uc-single-page-app.png").center-block

  .grey
    .container.pad20
      .row
        .col-md-4
          p &nbsp;
        .col-md-8
          h4 Development Time Workflow

          p.
            For development time, the following workflow is typical:
          ol
            li The developer signs up for the API Portal and registers the single page application in the portal; the developer specifies exactly under which URL the SPA will be reachable from (tick the "OAuth 2.0 Redirect URI" check box for the application)
            li By creating a subscription to the Backend API, the developer obtains client credentials for the single page application, a client ID and a client secret; for this use case, only the client ID is significant
            li The developer incorporates the client ID into the single page application:
              ul
                li If the SPA does not have a valid access token (e.g. in the HTML5 local storage), redirect to the Authorization Server (the URL of which is stated on the API page in the API Portal), specifying which application is calling by passing on the <code>client_id=...</code> and <code>grant_type=implicit</code> in the redirect parameters
                li Expect to get called back being passed an access token in the fragment of the URL of your own application (e.g. `https://my.spa.com/#access_token=abc928987dffabe9273`)
          
          p.
            For the OAuth2.0 Implicit Flow Grant, it is not necessary and actually "forbidden" to also incorporate the client
            secret into the single page app; in case the API also supports the client credentials flow, this would enable attackers to
            reverse engineer the app and extract the credentials. The client ID helps the authorization server to know exactly to
            which URL it will deliver the access token.
    
  .container.pad20
    .row
      .col-md-8
        h4 Runtime Workflow

        p.
          To illustrate the runtime flow of such an authentication and authorization process using the OAuth 2.0
          Implicit Flow Grant, see this picture:

        img(src="images/oauth2-implicit-flow.png").center-block

        p.
          Usually, the SPA will try to store an access token inside its local storage; in case there is none to use, or
          if it has expired, the SPA should redirect to the Authorization Server to get a new token. How the Authorization
          Server decides whether or not to issue a (new) token to the single page application is an implemnetation detail
          and inherently part of the business logic of your single page application.

        p.
          The Authorization normally delegates finding the identity of the end user (authenticate the user) to an external
          Identity Provider, which can be most anything, e.g. a SAML SSO IdP, Google, Github or any other Provider which allows
          for integrations.

  .grey
    .container.pad20
      .row
        .col-md-4
          p &nbsp;
        .col-md-8
          h4 How do I implement this with wicked?

          p.
            wicked.haufe.io has everything in the box to implement this type of workflow, using any identity
            provider you need, including wicked's own username/email and password store. Follow these steps:

          ol
            li.
              Using the wicked Kickstarter, specify which type of authentication you need (Google, Twitter,
              Github, SAML,...), by adding an authentication method to the default Authorization Server.
            li.
              Create an API defintion using the Kickstarter, and specify "OAuth 2.0" as a means of authentication
              and authorization. Link the authentication method you created previously to this API.
            li.
              Specify that you want to use the "Implicit Grant" on the API definition; usually it's advisable to
              also enable the "Authorization Code Grant" as well - from an API perspective the two grants are 
              behving identical, it just opens up more possiblilies for the Application developer which one
              he wants to use.
            li.
              Deploy your updated API management configuration to your wicked instance.

          p.
            Now application developers can sign up for using your API; the portal will help the developer
            to setup up the application and will also have help pages for the different flows
            (see <a href="https://wicked-demo.haufe.io/help/oauth2_implicit_grant" target="_blank">Implicit Grant help page</a>,
            and the <a href="https://wicked-demo.haufe.io/help/oauth2_authorization_code" target="_blank">Authorization Code Grant help page</a>).
