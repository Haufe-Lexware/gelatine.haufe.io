extends layout

mixin envVar(name, prop, defaultProp)
  - var readOnly = (prop.inherited)
  - var htmlName = name
  tr
    td= name
    if envId != 'default'
      td
        input(type='checkbox' name=htmlName+'.override' id=htmlName+'_override' checked=!readOnly onchange=`overrideChanged("${htmlName}");`)
    td(width='70%')
      - var inputType = (prop.encrypted) ? "password" : "string"
      if (!prop.value || prop.value.indexOf('\n') < 0)
        input(type='hidden' id='default_'+htmlName value=defaultProp.value)
        if !prop.encrypted
          input(type=inputType name=htmlName+'.value' id=htmlName value=prop.value readonly=readOnly).form-control
        else
          input(type=inputType name=htmlName+'.value' id=htmlName value=prop.value readonly=readOnly data-toggle='password').form-control
      else
        textarea(style='height: 300px' name=htmlName+'.value' id=htmlName readonly=readOnly).form-control= prop.value
    td
      - var encryptReadonly = (envId != 'default')
      - var encryptName = htmlName + '.encrypted'
      if encryptReadonly
        input(type='checkbox' checked=prop.encrypted disabled=encryptReadonly)
        - var encryptValue = prop.encrypted ? 'on' : null;
        input(type='hidden' name=htmlName+'.encrypted' value=encryptValue)
      else
        input(type='checkbox' name=encryptName id=htmlName+'_encrypted' checked=prop.encrypted disabled=encryptReadonly)
    if envId == 'default'
      if usedVars[name]
        td
          i In use
      else
        td
          input(type='hidden' name=htmlName+'.deleted' id='delete_'+htmlName value='')
          a(href=`javascript:removeProp("${name}");`).btn.btn-danger.btn-sm Remove

block scripts
  script(type='text/javascript').
    var backupValues = {};

    function overrideChanged(propName) {
      if ($('#' + propName + "_override").prop("checked")) {
        $('#' + propName).removeAttr("readonly");
        if (backupValues[propName])
          $('#' + propName).val(backupValues[propName]);
      } else {
        $('#' + propName).attr("readonly", true);
        var backupValue = $('#' + propName).val();
        backupValues[propName] = backupValue;
        var defaultValue = $('#default_' + propName).val();
        $('#' + propName).val(defaultValue);
      }
    }

    function removeProp(propName) {
      var prevVal = $('#delete_' + propName).val();
      if (!prevVal) {
        $('#' + propName).attr("readonly", true);
        $('#delete_' + propName).val("on");
        alert('Save form to delete ' + propName + '.');
      } else {
        $('#' + propName).removeAttr("readonly");
        $('#delete_' + propName).val("");
        alert('Restored ' + propName + '.');
      }
    }

block content
  .jumbotron
    .container
      h1 Environment #{envId}

      p Edit the environment variables of the environment.
  
  .container
    - var thisEnv = envDict[envId]
    - var defaultEnv = envDict["default"]

    form(role='form' action=`/envs/${envId}` method='post')
      table(width='100%')
        tr
          td
            a(href='/envs').btn.btn-default &laquo; Return
          td(style='text-align:right')
            button(type='submit').btn.btn-primary Save

      br

      table.table.table-striped
        thead
          tr
            th Variable Name
            if envId != 'default'
              th Override
            th Value
            th Encrypted
            if envId == 'default'
              th Remove
        tbody
          each prop, name in thisEnv
            +envVar(name, prop, defaultEnv[name])
